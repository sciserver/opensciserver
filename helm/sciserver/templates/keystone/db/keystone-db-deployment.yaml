{{ if and (not .Values.keystone.host) (not .Values.keystoneDb.host) -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "sciserver.fullname" . }}-keystone-db
  labels:
    app.kubernetes.io/name: {{ include "sciserver.name" . }}
    helm.sh/chart: {{ include "sciserver.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    app.kubernetes.io/component: keystone-db
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "sciserver.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/component: keystone-db
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "sciserver.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: keystone-db
    spec:
      containers:
      - image: "{{ .Values.keystoneDb.image.repository }}:{{ .Values.keystoneDb.image.tag }}"
        name: mysql
        securityContext:
          runAsUser: 1000
        resources:
          {{- toYaml .Values.keystoneDb.resources | nindent 10 }}
        imagePullPolicy: {{ .Values.keystoneDb.image.pullPolicy }}
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: {{ include "sciserver.fullname" . }}-keystone-db
                  key: password
        - name: MYSQL_DATABASE
          value: {{ .Values.keystoneDb.name | quote  }}
        - name: MYSQL_USER
          value: {{ .Values.keystoneDb.user | quote }}
        - name: MYSQL_PASSWORD
          valueFrom:
              secretKeyRef:
                  name: {{ include "sciserver.fullname" . }}-keystone-db
                  key: password
        - name: _CONFIG_HASH
          value: {{ include (print $.Template.BasePath "/keystone/db/keystone-db-secret.yaml") . | sha256sum }}
        ports:
        - containerPort: 3306
          name: mysql
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "mysql -u ${MYSQL_USER} -p${MYSQL_PASSWORD} -e 'SELECT 1' ${MYSQL_DATABASE}"
        volumeMounts:
        - name: data
          mountPath: /var/lib/mysql
      volumes:
      - name: data
        {{ if .Values.dev.nopvc }}
        emptyDir: {}
        {{ else }}
        persistentVolumeClaim:
          claimName: {{ .Values.keystoneDb.persistence.existingClaim | default (include "sciserver.fullname" .) }}-keystone-db
        {{ end }}
{{ end -}}