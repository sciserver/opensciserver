/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.user;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;
import org.ivoa.dm.model.MetadataRootEntityObject;
import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object UserGroup :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_UserGroup")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.DiscriminatorValue("UserGroup")

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "UserGroup.findById", query = "SELECT o FROM UserGroup o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "UserGroup.findByPublisherDID", query = "SELECT o FROM UserGroup o WHERE o.identity.publisherDID = :publisherDID")

        ,
        @javax.persistence.NamedQuery(name = "UserGroup.findByName", query = "SELECT o FROM UserGroup o WHERE o.name = :name")

})

public class UserGroup extends SciserverEntity {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /**
     * Attribute name :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "name", nullable = false)

    private String name;

    /**
     * Attribute description :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = true) @javax.persistence.Lob @javax.persistence.Column(name = "description", nullable = true)

    private String description;

    /**
     * Attribute accessibility :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Enumerated(javax.persistence.EnumType.STRING) @javax.persistence.Column(name = "accessibility", nullable = false)

    private GroupAccessibility accessibility;

    /**
     * Collection member :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<Member> member = null;

    /**
     * Reference owner :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "ownerId", referencedColumnName = "id", nullable = false)

    private User owner = null;
    /**
     * "lazy" version of the owner reference. Used by XML (un)marshallers to resolve possibly inderectly referenced
     * resource User.
     */

    @javax.persistence.Transient

    protected Reference p_owner = null;

    /**
     * Creates a new UserGroup.
     */
    protected UserGroup() {
        super();
    }

    /**
     * Creates a new UserGroup for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public UserGroup(final TransientObjectManager pContainer) {
        super(pContainer);
    }

    /**
     * Returns name Attribute
     * 
     * @return name Attribute
     */
    public String getName() {
        return this.name;
    }

    /**
     * Defines name Attribute
     * 
     * @param pName value to set
     */
    public void setName(final String pName) {
        this.name = pName;
    }

    /**
     * Returns description Attribute
     * 
     * @return description Attribute
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Defines description Attribute
     * 
     * @param pDescription value to set
     */
    public void setDescription(final String pDescription) {
        this.description = pDescription;
    }

    /**
     * Returns accessibility Attribute
     * 
     * @return accessibility Attribute
     */
    public GroupAccessibility getAccessibility() {
        return this.accessibility;
    }

    /**
     * Defines accessibility Attribute
     * 
     * @param pAccessibility value to set
     */
    public void setAccessibility(final GroupAccessibility pAccessibility) {
        this.accessibility = pAccessibility;
    }

    /**
     * Returns member Collection
     * 
     * @return member Collection
     */
    public List<Member> getMember() {
        return this.member;
    }

    /**
     * Defines member Collection
     * 
     * @param pMember collection to set
     */
    public void setMember(final List<Member> pMember) {
        this.member = pMember;
    }

    /**
     * Add a Member to the collection
     * 
     * @param pMember Member to add
     */
    public void addMember(final Member pMember) {
        if (this.member == null) {
            this.member = new ArrayList<Member>();
        }

        this.member.add(pMember);
    }

    /**
     * Returns owner Reference If the owner variable is null but its "lazy" version p_owner is not, that lazy reference
     * will be resolved to the actual object.
     * 
     * @return owner Reference
     */
    public User getOwner() {

        if (this.owner == null && this.p_owner != null) {
            this.owner = (User) resolve(this.p_owner, User.class);
        }
        return this.owner;

    }

    /**
     * Defines owner Reference
     * 
     * @param pOwner reference to set
     */
    public void setOwner(final User pOwner) {

        this.owner = pOwner;

    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final UserGroup other = (UserGroup) object;

            if (!areEquals(this.name, other.name)) {
                return false;
            }

            if (!areEquals(this.description, other.description)) {
                return false;
            }

            if (!areEquals(this.accessibility, other.accessibility)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("name".equals(propertyName)) {
            return getName();
        }

        if ("description".equals(propertyName)) {
            return getDescription();
        }

        if ("accessibility".equals(propertyName)) {
            return getAccessibility();
        }

        if ("member".equals(propertyName)) {
            return getMember();
        }

        if ("owner".equals(propertyName)) {
            return getOwner();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("name".equals(propertyName)) {
                setName((String) pValue);
                return true;
            }

            if ("description".equals(propertyName)) {
                setDescription((String) pValue);
                return true;
            }

            if ("accessibility".equals(propertyName)) {
                setAccessibility((GroupAccessibility) pValue);
                return true;
            }

            if ("owner".equals(propertyName)) {
                setOwner((User) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getOwner() != null) {
            this.p_owner = getOwner().asReference();
            if (getStateFor(getOwner()).isToBeMarshalled()) {
                getOwner().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_owner = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        super.deepToString(sb, isDeep, ids);

        sb.append("\n[ UserGroup");
        sb.append("={");

        sb.append("name=");
        if (getName() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getName());
        }
        sb.append(", ");
        sb.append("description=");
        if (getDescription() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDescription());
        }
        sb.append(", ");
        sb.append("accessibility=");
        if (getAccessibility() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getAccessibility());
        }
        sb.append(", ");
        sb.append("member=");
        if (getMember() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getMember());
        }
        sb.append(", ");
        sb.append("owner.id=");
        if (getOwner() != null) {
            getOwner().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && name != null;
        isOk = isOk && accessibility != null;
        isOk = isOk && (owner != null || p_owner != null);
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (name == null)
            sb.append("- atribute 'name' cannot be null\n");

        if (accessibility == null)
            sb.append("- atribute 'accessibility' cannot be null\n");

        if (owner == null && p_owner == null)
            sb.append("- reference 'owner' cannot be null\n");

        return sb.toString();
    }

}
