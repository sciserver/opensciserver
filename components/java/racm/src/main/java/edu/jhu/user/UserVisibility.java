/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting the code
**/
package edu.jhu.user;

import javax.xml.bind.annotation.*;

/**
 * UML Enumeration UserVisibility.
 *
 * Indicates whether a user is visible to the creation of groups or not. Some special users are defined at the system
 * level and are not to participate in any activity. PUBLIC users can be seen by others who may want to invite them to
 * groups. PRIVATE users do not want to be invited. Usewrs will be able to switch their own visibility between PUBLIS
 * and PRIVATE only.
 *
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */
public enum UserVisibility {

    /**
     * Value PUBLIC :
     * 
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     */
    PUBLIC("PUBLIC"),

    /**
     * Value PRIVATE :
     * 
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     */
    PRIVATE("PRIVATE"),

    /**
     * Value SYSTEM :
     * 
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     */
    SYSTEM("SYSTEM");

    /** string representation */
    private final String value;

    /**
     * Creates a new UserVisibility Enumeration Literal
     *
     * @param v string representation
     */
    UserVisibility(final String v) {
        value = v;
    }

    /**
     * Return the string representation of this enum constant (value)
     * 
     * @return string representation of this enum constant (value)
     */
    public final String value() {
        return this.value;
    }

    /**
     * Return the string representation of this enum constant (value)
     * 
     * @see #value()
     * @return string representation of this enum constant (value)
     */
    @Override
    public final String toString() {
        return value();
    }

    /**
     * Return the UserVisibility enum constant corresponding to the given string representation (value)
     *
     * @param v string representation (value)
     *
     * @return UserVisibility enum constant
     *
     * @throws IllegalArgumentException if there is no matching enum constant
     */
    public final static UserVisibility fromValue(final String v) {
        for (UserVisibility c : UserVisibility.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException("UserVisibility.fromValue : No enum const for the value : " + v);
    }

}
