/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.IVOAValueTypes;

import java.util.Date;

import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.MetadataDataType;

import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML DataType Identity :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Embeddable

public class Identity extends MetadataDataType {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /**
     * Attribute id :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "id", nullable = true)

    private Long id;

    /**
     * Attribute xmlId :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "xmlId", nullable = true)

    private String xmlId;

    /**
     * Attribute ivoId :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "ivoId", nullable = true)

    private String ivoId;

    /**
     * Creates a new Identity.
     */
    public Identity() {
        super();
    }

    /**
     * Returns id Attribute
     * 
     * @return id Attribute
     */
    public Long getId() {
        return this.id;
    }

    /**
     * Defines id Attribute
     * 
     * @param pId value to set
     */
    public void setId(final Long pId) {
        this.id = pId;
    }

    /**
     * Returns xmlId Attribute
     * 
     * @return xmlId Attribute
     */
    public String getXmlId() {
        return this.xmlId;
    }

    /**
     * Defines xmlId Attribute
     * 
     * @param pXmlId value to set
     */
    public void setXmlId(final String pXmlId) {
        this.xmlId = pXmlId;
    }

    /**
     * Returns ivoId Attribute
     * 
     * @return ivoId Attribute
     */
    public String getIvoId() {
        return this.ivoId;
    }

    /**
     * Defines ivoId Attribute
     * 
     * @param pIvoId value to set
     */
    public void setIvoId(final String pIvoId) {
        this.ivoId = pIvoId;
    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (true) {

            final Identity other = (Identity) object;

            if (!areEquals(this.id, other.id)) {
                return false;
            }

            if (!areEquals(this.xmlId, other.xmlId)) {
                return false;
            }

            if (!areEquals(this.ivoId, other.ivoId)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("id".equals(propertyName)) {
            return getId();
        }

        if ("xmlId".equals(propertyName)) {
            return getXmlId();
        }

        if ("ivoId".equals(propertyName)) {
            return getIvoId();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("id".equals(propertyName)) {
                setId((Long) pValue);
                return true;
            }

            if ("xmlId".equals(propertyName)) {
                setXmlId((String) pValue);
                return true;
            }

            if ("ivoId".equals(propertyName)) {
                setIvoId((String) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        sb.append("\n[ ");

        if (getId() != null) {
            sb.append("id=");
            MetadataElement.deepDataTypeToString(sb, isDeep, getId());
            sb.append(" ");
        }

        if (getXmlId() != null) {
            sb.append("xmlId=");
            MetadataElement.deepDataTypeToString(sb, isDeep, getXmlId());
            sb.append(" ");
        }

        if (getIvoId() != null) {
            sb.append("ivoId=");
            MetadataElement.deepDataTypeToString(sb, isDeep, getIvoId());
            sb.append(" ");
        }

        return sb.append("]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;

        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        return sb.toString();
    }

}
