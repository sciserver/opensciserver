/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.job;

import java.util.Date;

import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;
import org.ivoa.dm.model.MetadataRootEntityObject;
import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object COMPM :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_COMPM")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "COMPM.findById", query = "SELECT o FROM COMPM o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "COMPM.findByPublisherDID", query = "SELECT o FROM COMPM o WHERE o.identity.publisherDID = :publisherDID")

})

public class COMPM extends MetadataRootEntityObject {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /** jpaVersion gives the current version number for that entity (used by pessimistic / optimistic locking in JPA) */
    @javax.persistence.Version() @javax.persistence.Column(name = "OPTLOCK")
    protected int jpaVersion;

    /**
     * Attribute uuid :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "uuid", nullable = false)

    private String uuid;

    /**
     * Attribute description :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = true) @javax.persistence.Lob @javax.persistence.Column(name = "description", nullable = true)

    private String description;

    /**
     * Attribute label :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "label", nullable = true)

    private String label;

    /**
     * Attribute creatorUserid : The usernameof the owner ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "creatorUserid", nullable = false)

    private String creatorUserid;

    /**
     * Attribute defaultJobTimeout : The default job timeout in seconds ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "defaultJobTimeout", nullable = false)

    private Long defaultJobTimeout;

    /**
     * Attribute defaultJobsPerUser :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "defaultJobsPerUser", nullable = false)

    private Long defaultJobsPerUser;

    /**
     * Reference computeDomain :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.ManyToOne(optional = true, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "computeDomainId", referencedColumnName = "id", nullable = true)

    private ComputeDomain computeDomain = null;
    /**
     * "lazy" version of the computeDomain reference. Used by XML (un)marshallers to resolve possibly inderectly
     * referenced resource ComputeDomain.
     */

    @javax.persistence.Transient

    protected Reference p_computeDomain = null;

    /**
     * Creates a new COMPM.
     */
    protected COMPM() {
        super();
    }

    /**
     * Creates a new COMPM for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public COMPM(final TransientObjectManager pContainer) {
        super(pContainer);
    }

    /**
     * Returns uuid Attribute
     * 
     * @return uuid Attribute
     */
    public String getUuid() {
        return this.uuid;
    }

    /**
     * Defines uuid Attribute
     * 
     * @param pUuid value to set
     */
    public void setUuid(final String pUuid) {
        this.uuid = pUuid;
    }

    /**
     * Returns description Attribute
     * 
     * @return description Attribute
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Defines description Attribute
     * 
     * @param pDescription value to set
     */
    public void setDescription(final String pDescription) {
        this.description = pDescription;
    }

    /**
     * Returns label Attribute
     * 
     * @return label Attribute
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Defines label Attribute
     * 
     * @param pLabel value to set
     */
    public void setLabel(final String pLabel) {
        this.label = pLabel;
    }

    /**
     * Returns creatorUserid Attribute
     * 
     * @return creatorUserid Attribute
     */
    public String getCreatorUserid() {
        return this.creatorUserid;
    }

    /**
     * Defines creatorUserid Attribute
     * 
     * @param pCreatorUserid value to set
     */
    public void setCreatorUserid(final String pCreatorUserid) {
        this.creatorUserid = pCreatorUserid;
    }

    /**
     * Returns defaultJobTimeout Attribute
     * 
     * @return defaultJobTimeout Attribute
     */
    public Long getDefaultJobTimeout() {
        return this.defaultJobTimeout;
    }

    /**
     * Defines defaultJobTimeout Attribute
     * 
     * @param pDefaultJobTimeout value to set
     */
    public void setDefaultJobTimeout(final Long pDefaultJobTimeout) {
        this.defaultJobTimeout = pDefaultJobTimeout;
    }

    /**
     * Returns defaultJobsPerUser Attribute
     * 
     * @return defaultJobsPerUser Attribute
     */
    public Long getDefaultJobsPerUser() {
        return this.defaultJobsPerUser;
    }

    /**
     * Defines defaultJobsPerUser Attribute
     * 
     * @param pDefaultJobsPerUser value to set
     */
    public void setDefaultJobsPerUser(final Long pDefaultJobsPerUser) {
        this.defaultJobsPerUser = pDefaultJobsPerUser;
    }

    /**
     * Returns computeDomain Reference If the computeDomain variable is null but its "lazy" version p_computeDomain is
     * not, that lazy reference will be resolved to the actual object.
     * 
     * @return computeDomain Reference
     */
    public ComputeDomain getComputeDomain() {

        if (this.computeDomain == null && this.p_computeDomain != null) {
            this.computeDomain = (ComputeDomain) resolve(this.p_computeDomain, ComputeDomain.class);
        }
        return this.computeDomain;

    }

    /**
     * Defines computeDomain Reference
     * 
     * @param pComputeDomain reference to set
     */
    public void setComputeDomain(final ComputeDomain pComputeDomain) {

        this.computeDomain = pComputeDomain;

    }

    /**
     * Returns Jpa version for optimistic locking.
     * 
     * @return jpa version number
     */
    protected int getJpaVersion() {
        return this.jpaVersion;
    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final COMPM other = (COMPM) object;

            if (!areEquals(this.uuid, other.uuid)) {
                return false;
            }

            if (!areEquals(this.description, other.description)) {
                return false;
            }

            if (!areEquals(this.label, other.label)) {
                return false;
            }

            if (!areEquals(this.creatorUserid, other.creatorUserid)) {
                return false;
            }

            if (!areEquals(this.defaultJobTimeout, other.defaultJobTimeout)) {
                return false;
            }

            if (!areEquals(this.defaultJobsPerUser, other.defaultJobsPerUser)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("uuid".equals(propertyName)) {
            return getUuid();
        }

        if ("description".equals(propertyName)) {
            return getDescription();
        }

        if ("label".equals(propertyName)) {
            return getLabel();
        }

        if ("creatorUserid".equals(propertyName)) {
            return getCreatorUserid();
        }

        if ("defaultJobTimeout".equals(propertyName)) {
            return getDefaultJobTimeout();
        }

        if ("defaultJobsPerUser".equals(propertyName)) {
            return getDefaultJobsPerUser();
        }

        if ("computeDomain".equals(propertyName)) {
            return getComputeDomain();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("uuid".equals(propertyName)) {
                setUuid((String) pValue);
                return true;
            }

            if ("description".equals(propertyName)) {
                setDescription((String) pValue);
                return true;
            }

            if ("label".equals(propertyName)) {
                setLabel((String) pValue);
                return true;
            }

            if ("creatorUserid".equals(propertyName)) {
                setCreatorUserid((String) pValue);
                return true;
            }

            if ("defaultJobTimeout".equals(propertyName)) {
                setDefaultJobTimeout((Long) pValue);
                return true;
            }

            if ("defaultJobsPerUser".equals(propertyName)) {
                setDefaultJobsPerUser((Long) pValue);
                return true;
            }

            if ("computeDomain".equals(propertyName)) {
                setComputeDomain((ComputeDomain) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getComputeDomain() != null) {
            this.p_computeDomain = getComputeDomain().asReference();
            if (getStateFor(getComputeDomain()).isToBeMarshalled()) {
                getComputeDomain().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_computeDomain = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        sb.append("\n[ COMPM");
        sb.append("={");

        sb.append("uuid=");
        if (getUuid() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getUuid());
        }
        sb.append(", ");
        sb.append("description=");
        if (getDescription() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDescription());
        }
        sb.append(", ");
        sb.append("label=");
        if (getLabel() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getLabel());
        }
        sb.append(", ");
        sb.append("creatorUserid=");
        if (getCreatorUserid() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getCreatorUserid());
        }
        sb.append(", ");
        sb.append("defaultJobTimeout=");
        if (getDefaultJobTimeout() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDefaultJobTimeout());
        }
        sb.append(", ");
        sb.append("defaultJobsPerUser=");
        if (getDefaultJobsPerUser() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDefaultJobsPerUser());
        }
        sb.append(", ");
        sb.append("computeDomain.id=");
        if (getComputeDomain() != null) {
            getComputeDomain().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && uuid != null;
        isOk = isOk && creatorUserid != null;
        isOk = isOk && defaultJobTimeout != null;
        isOk = isOk && defaultJobsPerUser != null;
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (uuid == null)
            sb.append("- atribute 'uuid' cannot be null\n");

        if (creatorUserid == null)
            sb.append("- atribute 'creatorUserid' cannot be null\n");

        if (defaultJobTimeout == null)
            sb.append("- atribute 'defaultJobTimeout' cannot be null\n");

        if (defaultJobsPerUser == null)
            sb.append("- atribute 'defaultJobsPerUser' cannot be null\n");

        return sb.toString();
    }

}
