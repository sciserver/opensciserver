/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.rac;

import java.util.Date;

import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;

import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object RoleAssignment :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_RoleAssignment")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.DiscriminatorValue("RoleAssignment")

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "RoleAssignment.findById", query = "SELECT o FROM RoleAssignment o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "RoleAssignment.findByPublisherDID", query = "SELECT o FROM RoleAssignment o WHERE o.identity.publisherDID = :publisherDID")

})

public class RoleAssignment extends AccessControl {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /**
     * Reference role :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "roleId", referencedColumnName = "id", nullable = false)

    private Role role = null;
    /**
     * "lazy" version of the role reference. Used by XML (un)marshallers to resolve possibly inderectly referenced
     * resource Role.
     */

    @javax.persistence.Transient

    protected Reference p_role = null;

    /**
     * Creates a new RoleAssignment.
     */
    protected RoleAssignment() {
        super();
    }

    /**
     * Creates a new RoleAssignment for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public RoleAssignment(final Resource pContainer) {
        super(pContainer);
    }

    /**
     * Returns role Reference If the role variable is null but its "lazy" version p_role is not, that lazy reference
     * will be resolved to the actual object.
     * 
     * @return role Reference
     */
    public Role getRole() {

        if (this.role == null && this.p_role != null) {
            this.role = (Role) resolve(this.p_role, Role.class);
        }
        return this.role;

    }

    /**
     * Defines role Reference
     * 
     * @param pRole reference to set
     */
    public void setRole(final Role pRole) {

        this.role = pRole;

    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final RoleAssignment other = (RoleAssignment) object;

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("role".equals(propertyName)) {
            return getRole();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("role".equals(propertyName)) {
                setRole((Role) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getRole() != null) {
            this.p_role = getRole().asReference();
            if (getStateFor(getRole()).isToBeMarshalled()) {
                getRole().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_role = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        super.deepToString(sb, isDeep, ids);

        sb.append("\n[ RoleAssignment");
        sb.append("={");

        sb.append("role.id=");
        if (getRole() != null) {
            getRole().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && (role != null || p_role != null);
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (role == null && p_role == null)
            sb.append("- reference 'role' cannot be null\n");

        return sb.toString();
    }

}
