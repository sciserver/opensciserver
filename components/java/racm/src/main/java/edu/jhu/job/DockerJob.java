/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.job;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;
import org.ivoa.dm.model.MetadataRootEntityObject;
import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object DockerJob :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_DockerJob")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.DiscriminatorValue("DockerJob")

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "DockerJob.findById", query = "SELECT o FROM DockerJob o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "DockerJob.findByPublisherDID", query = "SELECT o FROM DockerJob o WHERE o.identity.publisherDID = :publisherDID")

})

public class DockerJob extends Job {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /**
     * Attribute command :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = false) @javax.persistence.Lob @javax.persistence.Column(name = "command", nullable = false)

    private String command;

    /**
     * Attribute scriptURI :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "scriptURI", nullable = true)

    private String scriptURI;

    /**
     * Attribute fullDockerCommand : The command that was actually executed in the docker container. ( Multiplicity :
     * 0..1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = true) @javax.persistence.Lob @javax.persistence.Column(name = "fullDockerCommand", nullable = true)

    private String fullDockerCommand;

    /**
     * Collection requiredVolume :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<RequiredVolume> requiredVolume = null;

    /**
     * Reference image :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "imageId", referencedColumnName = "id", nullable = false)

    private DockerImage image = null;
    /**
     * "lazy" version of the image reference. Used by XML (un)marshallers to resolve possibly inderectly referenced
     * resource DockerImage.
     */

    @javax.persistence.Transient

    protected Reference p_image = null;

    /**
     * Creates a new DockerJob.
     */
    protected DockerJob() {
        super();
    }

    /**
     * Creates a new DockerJob for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public DockerJob(final TransientObjectManager pContainer) {
        super(pContainer);
    }

    /**
     * Returns command Attribute
     * 
     * @return command Attribute
     */
    public String getCommand() {
        return this.command;
    }

    /**
     * Defines command Attribute
     * 
     * @param pCommand value to set
     */
    public void setCommand(final String pCommand) {
        this.command = pCommand;
    }

    /**
     * Returns scriptURI Attribute
     * 
     * @return scriptURI Attribute
     */
    public String getScriptURI() {
        return this.scriptURI;
    }

    /**
     * Defines scriptURI Attribute
     * 
     * @param pScriptURI value to set
     */
    public void setScriptURI(final String pScriptURI) {
        this.scriptURI = pScriptURI;
    }

    /**
     * Returns fullDockerCommand Attribute
     * 
     * @return fullDockerCommand Attribute
     */
    public String getFullDockerCommand() {
        return this.fullDockerCommand;
    }

    /**
     * Defines fullDockerCommand Attribute
     * 
     * @param pFullDockerCommand value to set
     */
    public void setFullDockerCommand(final String pFullDockerCommand) {
        this.fullDockerCommand = pFullDockerCommand;
    }

    /**
     * Returns requiredVolume Collection
     * 
     * @return requiredVolume Collection
     */
    public List<RequiredVolume> getRequiredVolume() {
        return this.requiredVolume;
    }

    /**
     * Defines requiredVolume Collection
     * 
     * @param pRequiredVolume collection to set
     */
    public void setRequiredVolume(final List<RequiredVolume> pRequiredVolume) {
        this.requiredVolume = pRequiredVolume;
    }

    /**
     * Add a RequiredVolume to the collection
     * 
     * @param pRequiredVolume RequiredVolume to add
     */
    public void addRequiredVolume(final RequiredVolume pRequiredVolume) {
        if (this.requiredVolume == null) {
            this.requiredVolume = new ArrayList<RequiredVolume>();
        }

        this.requiredVolume.add(pRequiredVolume);
    }

    /**
     * Returns computeDomain Reference If the computeDomain variable is null but its "lazy" version p_computeDomain is
     * not, that lazy reference will be resolved to the actual object.
     * 
     * @return computeDomain Reference
     */
    public DockerComputeDomain getComputeDomain() {

        return (DockerComputeDomain) super.getComputeDomain();

    }

    /**
     * Defines computeDomain Reference
     * 
     * @param pComputeDomain reference to set
     */
    public void setComputeDomain(final DockerComputeDomain pComputeDomain) {

        super.setComputeDomain(pComputeDomain);

    }

    /**
     * Returns image Reference If the image variable is null but its "lazy" version p_image is not, that lazy reference
     * will be resolved to the actual object.
     * 
     * @return image Reference
     */
    public DockerImage getImage() {

        if (this.image == null && this.p_image != null) {
            this.image = (DockerImage) resolve(this.p_image, DockerImage.class);
        }
        return this.image;

    }

    /**
     * Defines image Reference
     * 
     * @param pImage reference to set
     */
    public void setImage(final DockerImage pImage) {

        this.image = pImage;

    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final DockerJob other = (DockerJob) object;

            if (!areEquals(this.command, other.command)) {
                return false;
            }

            if (!areEquals(this.scriptURI, other.scriptURI)) {
                return false;
            }

            if (!areEquals(this.fullDockerCommand, other.fullDockerCommand)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("command".equals(propertyName)) {
            return getCommand();
        }

        if ("scriptURI".equals(propertyName)) {
            return getScriptURI();
        }

        if ("fullDockerCommand".equals(propertyName)) {
            return getFullDockerCommand();
        }

        if ("requiredVolume".equals(propertyName)) {
            return getRequiredVolume();
        }

        if ("computeDomain".equals(propertyName)) {
            return getComputeDomain();
        }

        if ("image".equals(propertyName)) {
            return getImage();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("command".equals(propertyName)) {
                setCommand((String) pValue);
                return true;
            }

            if ("scriptURI".equals(propertyName)) {
                setScriptURI((String) pValue);
                return true;
            }

            if ("fullDockerCommand".equals(propertyName)) {
                setFullDockerCommand((String) pValue);
                return true;
            }

            if ("computeDomain".equals(propertyName)) {
                setComputeDomain((DockerComputeDomain) pValue);
                return true;
            }

            if ("image".equals(propertyName)) {
                setImage((DockerImage) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getComputeDomain() != null) {
            this.p_computeDomain = getComputeDomain().asReference();
            if (getStateFor(getComputeDomain()).isToBeMarshalled()) {
                getComputeDomain().setXmlId();
            }
        }

        if (getImage() != null) {
            this.p_image = getImage().asReference();
            if (getStateFor(getImage()).isToBeMarshalled()) {
                getImage().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_computeDomain = null;

        this.p_image = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        super.deepToString(sb, isDeep, ids);

        sb.append("\n[ DockerJob");
        sb.append("={");

        sb.append("command=");
        if (getCommand() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getCommand());
        }
        sb.append(", ");
        sb.append("scriptURI=");
        if (getScriptURI() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getScriptURI());
        }
        sb.append(", ");
        sb.append("fullDockerCommand=");
        if (getFullDockerCommand() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getFullDockerCommand());
        }
        sb.append(", ");
        sb.append("requiredVolume=");
        if (getRequiredVolume() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getRequiredVolume());
        }
        sb.append(", ");
        sb.append("computeDomain.id=");
        if (getComputeDomain() != null) {
            getComputeDomain().getId();
        }
        sb.append(", ");
        sb.append("image.id=");
        if (getImage() != null) {
            getImage().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && command != null;
        isOk = isOk && (image != null || p_image != null);
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (command == null)
            sb.append("- atribute 'command' cannot be null\n");

        if (image == null && p_image == null)
            sb.append("- reference 'image' cannot be null\n");

        return sb.toString();
    }

}
