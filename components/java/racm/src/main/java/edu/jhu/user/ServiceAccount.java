/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.user;

import java.util.Date;

import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.TransientObjectManager;

import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object ServiceAccount :
 *
 * This subclass of Sciserverntity allows for RACM privileges to be assigned to servces
 *
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_ServiceAccount")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.DiscriminatorValue("ServiceAccount")

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "ServiceAccount.findById", query = "SELECT o FROM ServiceAccount o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "ServiceAccount.findByPublisherDID", query = "SELECT o FROM ServiceAccount o WHERE o.identity.publisherDID = :publisherDID")

})

public class ServiceAccount extends SciserverEntity {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /**
     * Attribute serviceToken : Token by which a service represented by the ResourceContext can identify itself to RACM.
     * 
     * For the future: this could be a public key. ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "serviceToken", nullable = false)

    private String serviceToken;

    /**
     * Creates a new ServiceAccount.
     */
    protected ServiceAccount() {
        super();
    }

    /**
     * Creates a new ServiceAccount for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public ServiceAccount(final TransientObjectManager pContainer) {
        super(pContainer);
    }

    /**
     * Returns serviceToken Attribute
     * 
     * @return serviceToken Attribute
     */
    public String getServiceToken() {
        return this.serviceToken;
    }

    /**
     * Defines serviceToken Attribute
     * 
     * @param pServiceToken value to set
     */
    public void setServiceToken(final String pServiceToken) {
        this.serviceToken = pServiceToken;
    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final ServiceAccount other = (ServiceAccount) object;

            if (!areEquals(this.serviceToken, other.serviceToken)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("serviceToken".equals(propertyName)) {
            return getServiceToken();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("serviceToken".equals(propertyName)) {
                setServiceToken((String) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        super.deepToString(sb, isDeep, ids);

        sb.append("\n[ ServiceAccount");
        sb.append("={");

        sb.append("serviceToken=");
        if (getServiceToken() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getServiceToken());
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && serviceToken != null;
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (serviceToken == null)
            sb.append("- atribute 'serviceToken' cannot be null\n");

        return sb.toString();
    }

}
