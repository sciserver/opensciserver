/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.rac;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;
import org.ivoa.dm.model.MetadataRootEntityObject;
import edu.jhu.user.ServiceAccount;

import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object ResourceContext :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_ResourceContext")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "ResourceContext.findById", query = "SELECT o FROM ResourceContext o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "ResourceContext.findByPublisherDID", query = "SELECT o FROM ResourceContext o WHERE o.identity.publisherDID = :publisherDID")

})

public class ResourceContext extends MetadataRootEntityObject {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /** jpaVersion gives the current version number for that entity (used by pessimistic / optimistic locking in JPA) */
    @javax.persistence.Version() @javax.persistence.Column(name = "OPTLOCK")
    protected int jpaVersion;

    /**
     * Attribute racmEndpoint :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "racmEndpoint", nullable = true)

    private String racmEndpoint;

    /**
     * Attribute uuid : A globally unique identifier, defined by th actual instance itself. I.e. should be set and not
     * changed by the instance configuration.
     * 
     * Maybe unique token as well? ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "uuid", nullable = false)

    private String uuid;

    /**
     * Attribute label : Any service trying to change the state of a context must be able to identify itself using a
     * token. ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "label", nullable = true)

    private String label;

    /**
     * Attribute description :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = true) @javax.persistence.Lob @javax.persistence.Column(name = "description", nullable = true)

    private String description;

    /**
     * Collection resource :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<Resource> resource = null;

    /**
     * Reference contextClass :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "contextClassId", referencedColumnName = "id", nullable = false)

    private ContextClass contextClass = null;
    /**
     * "lazy" version of the contextClass reference. Used by XML (un)marshallers to resolve possibly inderectly
     * referenced resource ContextClass.
     */

    @javax.persistence.Transient

    protected Reference p_contextClass = null;

    /**
     * Reference account :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 )
     */

    @javax.persistence.ManyToOne(optional = true, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "accountId", referencedColumnName = "id", nullable = true)

    private ServiceAccount account = null;
    /**
     * "lazy" version of the account reference. Used by XML (un)marshallers to resolve possibly inderectly referenced
     * resource ServiceAccount.
     */

    @javax.persistence.Transient

    protected Reference p_account = null;

    /**
     * Creates a new ResourceContext.
     */
    protected ResourceContext() {
        super();
    }

    /**
     * Creates a new ResourceContext for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public ResourceContext(final TransientObjectManager pContainer) {
        super(pContainer);
    }

    /**
     * Returns racmEndpoint Attribute
     * 
     * @return racmEndpoint Attribute
     */
    public String getRacmEndpoint() {
        return this.racmEndpoint;
    }

    /**
     * Defines racmEndpoint Attribute
     * 
     * @param pRacmEndpoint value to set
     */
    public void setRacmEndpoint(final String pRacmEndpoint) {
        this.racmEndpoint = pRacmEndpoint;
    }

    /**
     * Returns uuid Attribute
     * 
     * @return uuid Attribute
     */
    public String getUuid() {
        return this.uuid;
    }

    /**
     * Defines uuid Attribute
     * 
     * @param pUuid value to set
     */
    public void setUuid(final String pUuid) {
        this.uuid = pUuid;
    }

    /**
     * Returns label Attribute
     * 
     * @return label Attribute
     */
    public String getLabel() {
        return this.label;
    }

    /**
     * Defines label Attribute
     * 
     * @param pLabel value to set
     */
    public void setLabel(final String pLabel) {
        this.label = pLabel;
    }

    /**
     * Returns description Attribute
     * 
     * @return description Attribute
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Defines description Attribute
     * 
     * @param pDescription value to set
     */
    public void setDescription(final String pDescription) {
        this.description = pDescription;
    }

    /**
     * Returns resource Collection
     * 
     * @return resource Collection
     */
    public List<Resource> getResource() {
        return this.resource;
    }

    /**
     * Defines resource Collection
     * 
     * @param pResource collection to set
     */
    public void setResource(final List<Resource> pResource) {
        this.resource = pResource;
    }

    /**
     * Add a Resource to the collection
     * 
     * @param pResource Resource to add
     */
    public void addResource(final Resource pResource) {
        if (this.resource == null) {
            this.resource = new ArrayList<Resource>();
        }

        this.resource.add(pResource);
    }

    /**
     * Returns contextClass Reference If the contextClass variable is null but its "lazy" version p_contextClass is not,
     * that lazy reference will be resolved to the actual object.
     * 
     * @return contextClass Reference
     */
    public ContextClass getContextClass() {

        if (this.contextClass == null && this.p_contextClass != null) {
            this.contextClass = (ContextClass) resolve(this.p_contextClass, ContextClass.class);
        }
        return this.contextClass;

    }

    /**
     * Defines contextClass Reference
     * 
     * @param pContextClass reference to set
     */
    public void setContextClass(final ContextClass pContextClass) {

        this.contextClass = pContextClass;

    }

    /**
     * Returns account Reference If the account variable is null but its "lazy" version p_account is not, that lazy
     * reference will be resolved to the actual object.
     * 
     * @return account Reference
     */
    public ServiceAccount getAccount() {

        if (this.account == null && this.p_account != null) {
            this.account = (ServiceAccount) resolve(this.p_account, ServiceAccount.class);
        }
        return this.account;

    }

    /**
     * Defines account Reference
     * 
     * @param pAccount reference to set
     */
    public void setAccount(final ServiceAccount pAccount) {

        this.account = pAccount;

    }

    /**
     * Returns Jpa version for optimistic locking.
     * 
     * @return jpa version number
     */
    protected int getJpaVersion() {
        return this.jpaVersion;
    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final ResourceContext other = (ResourceContext) object;

            if (!areEquals(this.racmEndpoint, other.racmEndpoint)) {
                return false;
            }

            if (!areEquals(this.uuid, other.uuid)) {
                return false;
            }

            if (!areEquals(this.label, other.label)) {
                return false;
            }

            if (!areEquals(this.description, other.description)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if ("racmEndpoint".equals(propertyName)) {
            return getRacmEndpoint();
        }

        if ("uuid".equals(propertyName)) {
            return getUuid();
        }

        if ("label".equals(propertyName)) {
            return getLabel();
        }

        if ("description".equals(propertyName)) {
            return getDescription();
        }

        if ("resource".equals(propertyName)) {
            return getResource();
        }

        if ("contextClass".equals(propertyName)) {
            return getContextClass();
        }

        if ("account".equals(propertyName)) {
            return getAccount();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if ("racmEndpoint".equals(propertyName)) {
                setRacmEndpoint((String) pValue);
                return true;
            }

            if ("uuid".equals(propertyName)) {
                setUuid((String) pValue);
                return true;
            }

            if ("label".equals(propertyName)) {
                setLabel((String) pValue);
                return true;
            }

            if ("description".equals(propertyName)) {
                setDescription((String) pValue);
                return true;
            }

            if ("contextClass".equals(propertyName)) {
                setContextClass((ContextClass) pValue);
                return true;
            }

            if ("account".equals(propertyName)) {
                setAccount((ServiceAccount) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getContextClass() != null) {
            this.p_contextClass = getContextClass().asReference();
            if (getStateFor(getContextClass()).isToBeMarshalled()) {
                getContextClass().setXmlId();
            }
        }

        if (getAccount() != null) {
            this.p_account = getAccount().asReference();
            if (getStateFor(getAccount()).isToBeMarshalled()) {
                getAccount().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_contextClass = null;

        this.p_account = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        sb.append("\n[ ResourceContext");
        sb.append("={");

        sb.append("racmEndpoint=");
        if (getRacmEndpoint() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getRacmEndpoint());
        }
        sb.append(", ");
        sb.append("uuid=");
        if (getUuid() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getUuid());
        }
        sb.append(", ");
        sb.append("label=");
        if (getLabel() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getLabel());
        }
        sb.append(", ");
        sb.append("description=");
        if (getDescription() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDescription());
        }
        sb.append(", ");
        sb.append("resource=");
        if (getResource() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getResource());
        }
        sb.append(", ");
        sb.append("contextClass.id=");
        if (getContextClass() != null) {
            getContextClass().getId();
        }
        sb.append(", ");
        sb.append("account.id=");
        if (getAccount() != null) {
            getAccount().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && uuid != null;
        isOk = isOk && (contextClass != null || p_contextClass != null);
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (uuid == null)
            sb.append("- atribute 'uuid' cannot be null\n");

        if (contextClass == null && p_contextClass == null)
            sb.append("- reference 'contextClass' cannot be null\n");

        return sb.toString();
    }

}
