/**
This code was originally automatically generated from the UML model in
https://github.com/sciserver/resource-management/blob/master/vo-urp/RACM_v1.xml
using the VO-URP tool, https://github.com/sciserver/vo-urp. 
It is now included in the code-base and will no longer be 
generated automatically. You can edit this file, but be aware
of its origins when interpreting it.
**/

package edu.jhu.rac;

import java.util.Date;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import org.ivoa.dm.model.MetadataElement;
import org.ivoa.dm.model.IMetadataObjectContainer;
import org.ivoa.dm.model.Reference;
import org.ivoa.dm.model.TransientObjectManager;
import org.ivoa.dm.model.MetadataObject;
import org.ivoa.dm.model.IMetadataObjectContainer;

import static edu.jhu.ModelVersion.LAST_MODIFICATION_DATE;

/**
 * UML Object Resource :
 *
 * 
 * TODO : Missing description : please, update your UML model asap.
 *
 * 
 * @author generated by VO-URP tools VO-URP Home
 * @author Laurent Bourges (voparis) / Gerard Lemson (mpe)
 */

@javax.persistence.Entity @javax.persistence.Table(name = "t_Resource")

@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED) @javax.persistence.DiscriminatorColumn(name = "DTYPE", discriminatorType = javax.persistence.DiscriminatorType.STRING, length = 32)

@javax.persistence.NamedQueries({
        @javax.persistence.NamedQuery(name = "Resource.findById", query = "SELECT o FROM Resource o WHERE o.id = :id"),
        @javax.persistence.NamedQuery(name = "Resource.findByPublisherDID", query = "SELECT o FROM Resource o WHERE o.identity.publisherDID = :publisherDID")

        ,
        @javax.persistence.NamedQuery(name = "Resource.findByName", query = "SELECT o FROM Resource o WHERE o.name = :name")

})

public class Resource extends MetadataObject {

    /** serial uid = last modification date of the UML model. */
    private static final long serialVersionUID = LAST_MODIFICATION_DATE;

    /** jpaVersion gives the current version number for that entity (used by pessimistic / optimistic locking in JPA) */
    @javax.persistence.Version() @javax.persistence.Column(name = "OPTLOCK")
    protected int jpaVersion;

    /** container gives the parent entity which owns a collection containing instances of this class */
    @javax.persistence.ManyToOne(cascade = { javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }, fetch = javax.persistence.FetchType.LAZY) @javax.persistence.JoinColumn(name = "containerId", referencedColumnName = "id", nullable = false)
    protected ResourceContext container;

    /**
     * Attribute name : Human readable name of the resource. ( Multiplicity : 0..1 )
     */

    @javax.persistence.Basic(optional = true) @javax.persistence.Column(name = "name", nullable = true)

    private String name;

    /**
     * Attribute description :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..1 , MaxLength : -1 )
     */

    @javax.persistence.Basic(fetch = javax.persistence.FetchType.EAGER, optional = true) @javax.persistence.Lob @javax.persistence.Column(name = "description", nullable = true)

    private String description;

    /**
     * Attribute uuid : A unique id generated by the system upong creation of a Resource ( Multiplicity : 1 )
     */

    @javax.persistence.Basic(optional = false) @javax.persistence.Column(name = "uuid", nullable = false)

    private String uuid;

    /**
     * Collection accesControl :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<AccessControl> accesControl = null;

    /**
     * Collection associatedGroup :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<AssociatedSciEntity> associatedGroup = null;

    /**
     * Collection associatedResource :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 0..* )
     */

    @javax.persistence.OneToMany(cascade = javax.persistence.CascadeType.ALL, fetch = javax.persistence.FetchType.LAZY, mappedBy = "container", orphanRemoval = true)

    private List<AssociatedResource> associatedResource = null;

    /**
     * Reference resourceType :
     * 
     * TODO : Missing description : please, update your UML model asap.
     * 
     * ( Multiplicity : 1 )
     */

    @javax.persistence.ManyToOne(optional = false, fetch = javax.persistence.FetchType.LAZY, cascade = {
            javax.persistence.CascadeType.PERSIST, javax.persistence.CascadeType.MERGE,
            javax.persistence.CascadeType.REFRESH }) @javax.persistence.JoinColumn(name = "resourceTypeId", referencedColumnName = "id", nullable = false)

    private ResourceType resourceType = null;
    /**
     * "lazy" version of the resourceType reference. Used by XML (un)marshallers to resolve possibly inderectly
     * referenced resource ResourceType.
     */

    @javax.persistence.Transient

    protected Reference p_resourceType = null;

    /**
     * Creates a new Resource.
     */
    protected Resource() {
        super();
    }

    /**
     * Creates a new Resource for the given Container Entity.
     *
     * The Parent Container CAN NOT BE NULL
     *
     * @param pContainer the parent container CAN NOT BE NULL
     */
    public Resource(final ResourceContext pContainer) {
        super();
        this.setContainer(pContainer);
    }

    /**
     * Returns name Attribute
     * 
     * @return name Attribute
     */
    public String getName() {
        return this.name;
    }

    /**
     * Defines name Attribute
     * 
     * @param pName value to set
     */
    public void setName(final String pName) {
        this.name = pName;
    }

    /**
     * Returns description Attribute
     * 
     * @return description Attribute
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Defines description Attribute
     * 
     * @param pDescription value to set
     */
    public void setDescription(final String pDescription) {
        this.description = pDescription;
    }

    /**
     * Returns uuid Attribute
     * 
     * @return uuid Attribute
     */
    public String getUuid() {
        return this.uuid;
    }

    /**
     * Defines uuid Attribute
     * 
     * @param pUuid value to set
     */
    public void setUuid(final String pUuid) {
        this.uuid = pUuid;
    }

    /**
     * Returns accesControl Collection
     * 
     * @return accesControl Collection
     */
    public List<AccessControl> getAccesControl() {
        return this.accesControl;
    }

    /**
     * Defines accesControl Collection
     * 
     * @param pAccesControl collection to set
     */
    public void setAccesControl(final List<AccessControl> pAccesControl) {
        this.accesControl = pAccesControl;
    }

    /**
     * Add a AccessControl to the collection
     * 
     * @param pAccessControl AccessControl to add
     */
    public void addAccesControl(final AccessControl pAccessControl) {
        if (this.accesControl == null) {
            this.accesControl = new ArrayList<AccessControl>();
        }

        this.accesControl.add(pAccessControl);
    }

    /**
     * Returns associatedGroup Collection
     * 
     * @return associatedGroup Collection
     */
    public List<AssociatedSciEntity> getAssociatedGroup() {
        return this.associatedGroup;
    }

    /**
     * Defines associatedGroup Collection
     * 
     * @param pAssociatedGroup collection to set
     */
    public void setAssociatedGroup(final List<AssociatedSciEntity> pAssociatedGroup) {
        this.associatedGroup = pAssociatedGroup;
    }

    /**
     * Add a AssociatedSciEntity to the collection
     * 
     * @param pAssociatedSciEntity AssociatedSciEntity to add
     */
    public void addAssociatedGroup(final AssociatedSciEntity pAssociatedSciEntity) {
        if (this.associatedGroup == null) {
            this.associatedGroup = new ArrayList<AssociatedSciEntity>();
        }

        this.associatedGroup.add(pAssociatedSciEntity);
    }

    /**
     * Returns associatedResource Collection
     * 
     * @return associatedResource Collection
     */
    public List<AssociatedResource> getAssociatedResource() {
        return this.associatedResource;
    }

    /**
     * Defines associatedResource Collection
     * 
     * @param pAssociatedResource collection to set
     */
    public void setAssociatedResource(final List<AssociatedResource> pAssociatedResource) {
        this.associatedResource = pAssociatedResource;
    }

    /**
     * Add a AssociatedResource to the collection
     * 
     * @param pAssociatedResource AssociatedResource to add
     */
    public void addAssociatedResource(final AssociatedResource pAssociatedResource) {
        if (this.associatedResource == null) {
            this.associatedResource = new ArrayList<AssociatedResource>();
        }

        this.associatedResource.add(pAssociatedResource);
    }

    /**
     * Returns resourceType Reference If the resourceType variable is null but its "lazy" version p_resourceType is not,
     * that lazy reference will be resolved to the actual object.
     * 
     * @return resourceType Reference
     */
    public ResourceType getResourceType() {

        if (this.resourceType == null && this.p_resourceType != null) {
            this.resourceType = (ResourceType) resolve(this.p_resourceType, ResourceType.class);
        }
        return this.resourceType;

    }

    /**
     * Defines resourceType Reference
     * 
     * @param pResourceType reference to set
     */
    public void setResourceType(final ResourceType pResourceType) {

        this.resourceType = pResourceType;

    }

    /**
     * Returns the Container Entity == 'Parent'.
     * 
     * @return the parent container Entity
     */
    public ResourceContext getContainer() {
        return this.container;
    }

    @Override
    public IMetadataObjectContainer container() {
        return getContainer();
    }

    /**
     * Sets the Container Entity == 'Parent' ONLY.
     * 
     * @param pContainer the parent container
     */
    private void setContainerField(final ResourceContext pContainer) {
        this.container = pContainer;
    }

    /**
     * Sets the Container Entity == 'Parent' and adds this to the appropriate collection on the container.
     *
     * @param pContainer the parent container CAN NOT BE NULL
     *
     * @throws IllegalStateException if pContainer is null !
     */
    protected void setContainer(final ResourceContext pContainer) {
        if (pContainer == null) {
            throw new IllegalStateException("The parent container can not be null !");
        }
        setContainerField(pContainer);
        pContainer.addResource(this);
    }

    /**
     * Returns Jpa version for optimistic locking.
     * 
     * @return jpa version number
     */
    protected int getJpaVersion() {
        return this.jpaVersion;
    }

    /**
     * Returns equals from id attribute here. Child classes can override this method to allow deep equals with
     * attributes / references / collections
     *
     * @param object the reference object with which to compare.
     * @param isDeep true means to call hashCode(sb, true) for all attributes / references / collections which are
     * MetadataElement implementations
     *
     * @return <code>true</code> if this object is the same as the obj argument; <code>false</code> otherwise.
     */
    @Override
    public boolean equals(final Object object, final boolean isDeep) {
        /* identity, nullable, class and identifiers checks */
        if (!(super.equals(object, isDeep))) {
            return false;
        }

        /* do check values (attributes / references / collections) */

        if (isDeep) {

            final Resource other = (Resource) object;

            if (!areEquals(this.name, other.name)) {
                return false;
            }

            if (!areEquals(this.description, other.description)) {
                return false;
            }

            if (!areEquals(this.uuid, other.uuid)) {
                return false;
            }

        }

        return true;
    }

    /**
     * Returns the property value given the property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @return property value or null if unknown or not defined
     */
    @Override
    public Object getProperty(final String propertyName) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return null;
        }
        // second : search in parent classes (maybe null) :
        Object res = super.getProperty(propertyName);

        if (PROPERTY_CONTAINER.equals(propertyName)) {
            return getContainer();
        }

        if ("name".equals(propertyName)) {
            return getName();
        }

        if ("description".equals(propertyName)) {
            return getDescription();
        }

        if ("uuid".equals(propertyName)) {
            return getUuid();
        }

        if ("accesControl".equals(propertyName)) {
            return getAccesControl();
        }

        if ("associatedGroup".equals(propertyName)) {
            return getAssociatedGroup();
        }

        if ("associatedResource".equals(propertyName)) {
            return getAssociatedResource();
        }

        if ("resourceType".equals(propertyName)) {
            return getResourceType();
        }

        return res;
    }

    /**
     * Sets the property value to the given property name. Can be any property (internal, attribute, reference,
     * collection) and all type must be supported (dataType, objectType, enumeration)
     *
     * @param propertyName name of the property (like in UML model)
     *
     * @param pValue to be set
     * 
     * @return true if property has been set
     */
    @Override
    public boolean setProperty(final String propertyName, final Object pValue) {
        // first : checks if propertyName is null or empty :
        if (propertyName == null) {
            return false;
        }
        // second : search in parent classes (maybe null) :
        boolean res = super.setProperty(propertyName, pValue);

        if (!res) {

            if (PROPERTY_CONTAINER.equals(propertyName)) {
                setContainerField((ResourceContext) pValue);
                return true;
            }

            if ("name".equals(propertyName)) {
                setName((String) pValue);
                return true;
            }

            if ("description".equals(propertyName)) {
                setDescription((String) pValue);
                return true;
            }

            if ("uuid".equals(propertyName)) {
                setUuid((String) pValue);
                return true;
            }

            if ("resourceType".equals(propertyName)) {
                setResourceType((ResourceType) pValue);
                return true;
            }

        }

        return res;
    }

    /**
     * Sets all Reference fields to their appropriate value.<br/>
     */
    @Override
    protected void prepareReferencesForMarshalling() {
        super.prepareReferencesForMarshalling();

        if (getResourceType() != null) {
            this.p_resourceType = getResourceType().asReference();
            if (getStateFor(getResourceType()).isToBeMarshalled()) {
                getResourceType().setXmlId();
            }
        }

    }

    /**
     * Resets all Reference fields to null.<br/>
     */
    @Override
    protected void resetReferencesAfterMarshalling() {
        super.prepareReferencesForMarshalling();

        this.p_resourceType = null;

    }

    /**
     * Puts the string representation in the given string buffer : <br>
     * "Type =[class name @ hashcode] : { field name = field value , ...}"
     *
     * @param sb given string buffer to fill
     * @param isDeep true means to call deepToString(sb, true, ids) for all attributes / references / collections which
     * are MetadataElement implementations
     * @param ids identity map to avoid cyclic loops
     *
     * @return stringbuffer the given string buffer filled with the string representation
     */
    @Override
    protected StringBuilder deepToString(final StringBuilder sb, final boolean isDeep,
            final Map<MetadataElement, Object> ids) {

        sb.append("\n[ Resource");
        sb.append("={");

        sb.append("container=");
        if (getContainer() != null) {
            // short toString :
            MetadataElement.deepToString(sb, false, ids, getContainer());
        }
        sb.append(" | ");

        sb.append("name=");
        if (getName() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getName());
        }
        sb.append(", ");
        sb.append("description=");
        if (getDescription() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getDescription());
        }
        sb.append(", ");
        sb.append("uuid=");
        if (getUuid() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getUuid());
        }
        sb.append(", ");
        sb.append("accesControl=");
        if (getAccesControl() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getAccesControl());
        }
        sb.append(", ");
        sb.append("associatedGroup=");
        if (getAssociatedGroup() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getAssociatedGroup());
        }
        sb.append(", ");
        sb.append("associatedResource=");
        if (getAssociatedResource() != null) {
            MetadataElement.deepToString(sb, isDeep, ids, getAssociatedResource());
        }
        sb.append(", ");
        sb.append("resourceType.id=");
        if (getResourceType() != null) {
            getResourceType().getId();
        }

        return sb.append("} ]");

    }

    public boolean isValid() {
        if (!super.isValid())
            return false;
        boolean isOk = true;
        isOk = isOk && uuid != null;
        isOk = isOk && (resourceType != null || p_resourceType != null);
        return isOk;
    }

    public String validationErrors() {
        StringBuffer sb = new StringBuffer(super.validationErrors());

        if (uuid == null)
            sb.append("- atribute 'uuid' cannot be null\n");

        if (resourceType == null && p_resourceType == null)
            sb.append("- reference 'resourceType' cannot be null\n");

        return sb.toString();
    }

}
